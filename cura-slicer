#!/usr/bin/perl

# == Cura-Slicer (CLI) aka Cura-CLI-Wrapper, small command-line wrapper for CuraEngine
#    written by Rene K. Mueller <spiritdude@gmail.com>
#
# Copyright 2021 by Rene K. Mueller
#
# License: LGPLv3 (see LICENSE file)
#
# Description:
#   It provides simple wrapper around CuraEngine itself with the ability to query all possible settings
#
#   For technical details see at 
#        https://github.com/Spiritdude/Cura-CLI-Wrapper
#     and
#        https://xyzdims.com/2021/03/24/3d-printing-cura-cli-wrapper-cura-slicer/
#
# History:
# 2021/03/24: 0.0.5: properly track source of settings with $confsrc->{key}
# 2021/03/24: 0.0.4: --load <config> support added
# 2021/03/23: 0.0.2: --help gives all settings, or --help <term> queries matches, -v and -vv (2 levels of verbosity), 
# 2021/03/23: 0.0.1: just a small script to ease the CuraEngine usage

use strict;
use Time::HiRes 'time';
use JSON;

my $APPNAME = 'Cura-Slicer';
my $GITHUB_NAME = 'Cura-CLI-Wrapper';
my $VERSION = '0.0.6';

my($app) = ($0=~/\/([^\/]+)$/);

my $conf = {  
   verbose => 0,
   binary => "CuraEngine",
   binary_version => '???',
   definition => "/usr/share/$app/fdmprinter.def.json"
};

my $confsrc;      # -- store source of a configuration setting (cli, default of config file)

my %sf2l = ( 'v' => 'verbose', 'h' => 'help', 'o' => 'output', 'l' => 'load' );  # -- short flag to long option
my %sf2la = ( 'o' => 1 );                                                        # -- shoft flag additional arg
my %f2a = ( 'output' => 1, 'load' => 1 );                                        # -- flag additional arg
my %if = ( 'verbose' => 1, binary => 1, output => 1, 'load' => 1 );              # -- internal flag/option

my(@slicer_args,@slicer_args_cli);

if(!-e $conf->{definition}) {
   print "$app ERROR: $conf->{definition} doesn't exist\n";
   exit -1;
}

foreach my $p ("/usr/share/$app","$ENV{HOME}/.config/$app") {
   my $c = parseConfig($p."/base.ini");
   foreach my $k (keys %$c) {
      $conf->{$k} = $c->{$k};
      push(@slicer_args,'-s',"$k=$c->{$k}");
   }
}

my @fs;

# -- parsing the argument list is a bit complex, but it's worth to do to immitate slic3r and prusa-slicer CLI usage

for(my $i=0; $i<@ARGV; $i++) {                        # -- preprocess all command-line arguments
   my($k,$v);

   $_ = $ARGV[$i];
   
   if(/^--([\w\-\.]+)=(.*)$/) {                       # -- parse '--key=value'
      $k = $1, $v = $2;
      my $k_ = $k; $k_ =~ s/\-/_/g;
      if($if{$k_}) {                                  # -- internal for the wrapper itself?
         if($k eq 'load') {                           # -- treat '--load=<conf>' specially
            my $c = parseConfig($v);
            foreach my $k (sort keys %$c) {
               $conf->{$k} = $c->{$k};
               push(@slicer_args_cli,"-s","$k=$c->{$k}");
            }
         } else {
            $conf->{$k_} = $v;
         }
      } else {
         $conf->{$k_} = $v;
         push(@slicer_args_cli,("-s","$k_=$v"));      #    if not push it on the argument list for CuraEngine
      }
      
   } elsif(/^--([\w\-\.]+)$/) {                       # -- general switches '--key'
      $k = $1, $k =~ s/\-/_/g;
      if($f2a{$k}) {                                  # -- additional arg?
         if($k eq 'load') {                           # -- treat '--load' <conf> specially
            my $c = parseConfig($ARGV[++$i]);
            foreach my $k (sort keys %$c) {
               $conf->{$k} = $c->{$k};
               push(@slicer_args_cli,"-s","$k=$c->{$k}");
            }
         } else {
            $conf->{$k} = $ARGV[++$i];
         }
      } else {
         $conf->{$k}++;
      }

   } elsif(/^-(\w+)$/) {                              # -- single character switch extended
      if($sf2la{$1}) {                                # -- additional next argument?
         $conf->{$sf2l{$1}} = $ARGV[++$i];
      } else {
         foreach(split(/|/,$1)) {
            $conf->{defined $sf2l{$_} ? $sf2l{$_} : $_}++;
         }
      }
   } else {
      push(@fs,$_);                                  # -- must be a file to process
   }
}

print to_json($conf,{pretty=>1,canonical=>1}),"\n" if($conf->{verbose}>2);

$conf->{binary_version} = $1 if(`$conf->{binary} 2>&1`=~/Cura.+version\s+([\d\.]+)/);     # -- crude way to retrieve version

if($conf->{version}) {
   print "$APPNAME $VERSION aka $GITHUB_NAME ($conf->{binary} $conf->{binary_version})\n";
   exit 0;

} elsif($conf->{help}) {
   local $/;

   open(my $fh,"<",$conf->{definition});
   my $json = <$fh>;
   close $fh;

   my $d = from_json($json);

   $d = $d->{settings};

   my $done = {};                      # -- since we walk recursive, keep a cache of already listed settings
   foreach my $k (sort keys %$d) {
      list_settings($d->{$k},$done) if(ref($d->{$k}) eq 'HASH');     # -- goes recursive
   }
   foreach my $k (sort keys %$done) {
      print $done->{$k};
   }
   exit 0;
}

push(@slicer_args,@slicer_args_cli);      # -- append CLI args as well (at least to override earlier settings from config files)

if($conf->{help} || @fs <= 0) {
   print "USAGE $APPNAME $VERSION aka $GITHUB_NAME ($conf->{binary} $conf->{binary_version}): [<opts>] <file.stl> ...
   options:
      -v or --verbose         increase verbosity
      -vv or --verbose=2          \"       \"
      --version               display version and exit
      --load=<config>         load config file
      --load <config>           \"         \"
      --output=<fn>           set output filename
      --output <fn>             \"         \"
      -o <fn>                   \"         \"
      --<k>=<v>               set CuraEngine settings (keys with '-' will be converted to '_')
      -h or --help            display all settings
      -h or --help <term> ..  display settings matching term

   examples:
      $app --help
      $app --help retract
      $app -hv retract 
      $app sphere.stl
      $app overhang.stl --output=sample.gcode
      $app overhang.stl --layer-height=0.1 --support-enable=true -o sample.gcode

";
   exit 0;
}

print "== $APPNAME aka $GITHUB_NAME $VERSION ($conf->{binary} $conf->{binary_version}) ==\n";

foreach my $fn (@fs) {
   my $t = time();
   
   unless(-e $fn) {
      print STDERR "$app ERROR: file not accessible '$fn'\n";
      exit -1;
   }
   my $fout = $fn; 
   
   $fout =~ s/\.(\w+)$/.gcode/;
   $fout .= ".gcode" unless($fout =~ /\.gcode$/i);
   $fout = $conf->{output} if(defined $conf->{output});
   
   print "processing $fn, slicing to $fout\n";
   if(fork()==0) {
      my(@a) = ($conf->{binary});
      push(@a,"slice","-j",$conf->{definition},@slicer_args);
      push(@a,"-l",$fn);
      push(@a,"-o",$fout);
      print "$app INF: @a\n" if($conf->{verbose});
      # -- is important, as CuraEngine is chatty and closing only STDERR will pollute the resulting G-code with error messages(!!)
      close STDERR, close STDOUT if($conf->{verbose}<2);      
      exec(@a);
      exit 0;        # -- if $conf->{binary} doesn't exist, or otherwise fails, it will come here
   }
   wait;
   if(!-e $fout || (stat($fout))[7]==0) {    # -- CuraEngine creates also zero-byte .gcode output in case of error
      unlink $fout;     # -- if it's zero byte, then remove it 
      print "$app ERROR: $app ($conf->{binary}) did not generate any gcode, abort.\n";
      print "$app HINT: execute with -vv to see the actual problem\n" unless($conf->{verbose}>1);
      exit -1;
   }
   $t = time()-$t;
   print sprintf("   took %.2f secs total, done.\n",$t);
}

sub parseConfig {
   my($fn) = @_;
   my $c = {};

   unless(-e $fn) {
      print "$app: config $fn ignored, not accessible / does not exist\n" if($conf->{verbose});
      return;
   }

   print "$app: reading $fn\n" if($conf->{verbose});

   open(my $fh,"<",$fn);
   my($k,$v);
   while(<$fh>) {
      chop;
      next if(/^\s*#/);
      $k = $1, $v = $2, $k =~ s/\-/_/g, $c->{$k} = $v, $confsrc->{$k} = "config $fn" if(/([\w\-]+)\s*=\s*(.*)/);
   }
   close $fh;
   return $c;
}

sub list_settings {
   my($d,$done) = @_;

   foreach my $k (sort keys %$d) {
      if(ref($d->{$k}) eq 'HASH') {
         my $h = 1;
         if(@fs>0) {       # -- any term listed? try to match it
            $h = 0;
            foreach(@fs) {
               s/\-/_/g;
               $h++, last if($k =~ /$_/i);
            }
         }
         if($h && !$done->{$k}) {
            $done->{$k} .= "== $k ($d->{$k}->{label}) ==\n   $d->{$k}->{description}\n" if($conf->{verbose});
            $done->{$k} .= "   " if($conf->{verbose});
            my $xtr = $d->{$k}->{unit} ? " [$d->{$k}->{unit}]" : "";
            my $vc = defined $conf->{$k} ? $conf->{$k} : $d->{$k}->{default_value};
            $vc = to_json($vc) if(ref($vc));
            $vc =~ s/\n/\\n/g;
            my $v = defined $conf->{$k} ? $vc . " (".(defined $confsrc->{$k} ? $confsrc->{$k} : "cli") .")" : $vc."$xtr (default)";
            $v .= ", options: ".join(", ",sort keys %{$d->{$k}->{options}}) if(defined $d->{$k}->{options});
            $done->{$k} .= "$k = $v\n";
            $done->{$k} .= "\n" if($conf->{verbose});
         }
         list_settings($d->{$k},$done);
      }
   }
}


